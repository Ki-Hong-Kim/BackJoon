# 가장 큰 수
# 람다는 변수 명 지정 없이 생성하는 함수와 같다.
def solution(numbers):
    numbers = list(map(str, numbers)) 
    
    numbers.sort(key=lambda x: x*5, reverse=True)
    
    return str(int(''.join(numbers)))

solution([3, 30, 34, 5, 9])



##### 설명
def solution(numbers):
    numbers = list(map(str, numbers)) 
    
    numbers.sort(key=lambda x: x*3, reverse=True)
    
    return str(int(''.join(numbers)))

'''

숫자를 이어서 작성하는 방법 중
숫자를 문자열로 바꿔 더하면 이어지도록 만들 것이다.
1 + 5 => 6 이 아닌
1 + 5 => 15가 되도록

여러 조합 중 가장 큰 수를 구하는 방법에 대해 고민해보자 (우리는 조합을 구하는게 아님)
1. 숫자의 길이와 상관 없이 앞자리 수가 크면 클 수록 좋다.
2. 앞 숫자가 같은 경우 두번째를 비교하고 계속 비교 (여기서는 자리수가 짧은값이 좋음)
   ex) 30, 35, 40, 3
3. 내림차순으로 정렬하자
   ex) 40, 35, 3, 30
   3으로 시작하는 숫자들을 정렬하는게 힘듦
   그래서
    문자열 데이터에 곱하기를 사용하면 반복적으로 출력된다
    ex) "안녕"*3
        안녕안녕안녕
        35, 3, 30
        353535, 333, 303030 으로 만들면 비교하기가 편하다
        
        몇 번 곱해야하는지 고민해봐야함. (입력되는 숫자의 범위가 0~1000, 입력되는 숫자의 자리수에 따라 곱하는 값이 달라짐)
        ex) 8, 89, 889, 883
        -> 89, 889, 8, 883으로 정렬되어야함 그럼 범위중 가장 큰 값인 1000이 입력된다면 앞자리가 1이고 그 이후가 000이니 어떠한 숫자가 오더라도 맨 뒤에 위치해야한다.
           8과 나머지 숫자를 비교하기위해서는 최대 자리수인 3을 곱해줘야한다.
4. 정렬된 숫자들을 합쳐서 출력하면 끝
   마지막 int로 변경했다가 str로 다시 설정하는 이유:
       테스트 케이스 중 0만 입력되는 값이 있어서 int로 변경 안하면 00000... 이 출력됨

'''

